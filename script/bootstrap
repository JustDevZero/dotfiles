#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ''

touch ~/.local.rc

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then

    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your git author name?'
    read -e git_authorname
    user ' - What is your git author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" ~/.dotfiles/git/gitconfig.symlink.example > ~/.dotfiles/git/gitconfig.symlink

    echo "export GIT_AUTHOR_NAME=$git_authorname" >> ~/.local.rc
    echo "export GIT_AUTHOR_EMAIL=$git_authoremail" >> ~/.local.rc

    success 'gitconfig'
  fi
}

setup_android_env () {
    user ' - Do you develop for android?'
    read -e install_android_path
    info "android"

    if [[ "$install_android_path" = "yes" || "$install_android_path" = "y" ]]; then

        user ' - Do you use eclipse for dev? If so write path'
        read -e eclipse_path

        if [ "$eclipse_path" = " " ]; then
            echo "export ECLIPSE=$eclipse_path" >> ~/.local.rc
            echo "export PATH=$ECLIPSE" >> ~/.local.rc
        fi

        user ' - Do you use android-sdk? Write path'
        read -e android_sdk_path

        if [ "$android_sdk_path" = " " ]; then
            echo "export ANDROID_TOOLS=\"$android_sdk_path/tools\"" >> ~/.local.rc
            echo "export ANDROID_PLATFORM_TOOLS=\"$android_sdk_path/platform-tools\"" >> ~/.local.rc
            echo "export PATH=$ANDROID_TOOLS:$ANDROID_PLATAFORM_TOOLS:$PATH" >> ~/.local.rc
        fi

        user ' - Do you use android-ndk? Write path'
        read -e android_ndk_path

        if [ "$android_ndk_path" = " " ]; then
            echo "export ANDROID_NDK=\"$android_ndk_path/tools\"" >> ~/.local.rc
        fi
    fi
    success "android"

}

setup_browser () {
    info "browser"
    user ' - What your favorite web browser? Please, write path.'
    read -e web_browser
    echo "export BROWSER=\"$web_browser\"" >> ~/.local.rc
    browser_path=$(dirname $web_browser)
    echo "PATH=$browser_path:$PATH" > ~/.dotfiles/system/_path.temp
    sed s'=:=\n='g ~/.dotfiles/system/_path.temp  > ~/.dotfiles/system/_path.temp2
    uniq ~/.dotfiles/system/_path.temp2 > ~/.dotfiles/system/_path.temp3
    sed s'=\n=:='g ~/.dotfiles/system/_path.temp3 > ~/.dotfiles/system/_path.temp4
    mv ~/.dotfiles/system/_path.temp4 ~/.dotfiles/system/_path.sh
    rm ~/.dotfiles/system/_path.temp
    rm ~/.dotfiles/system/_path.temp2
    rm ~/.dotfiles/system/_path.temp3
    success "browser"
}

setup_office () {
    info "office suite"
    user ' - What you use as office suite? Please, write path.'
    read -e office_suite
    echo "export OFFICESUITE=\"$office_suite\"" >> ~/.local.rc
    echo "PATH=$office_suite:$PATH" > ~/.dotfiles/system/_path.temp
    sed s'=:=\n='g ~/.dotfiles/system/_path.temp  > ~/.dotfiles/system/_path.temp2
    uniq ~/.dotfiles/system/_path.temp2 > ~/.dotfiles/system/_path.temp3
    sed s'=\n=:='g ~/.dotfiles/system/_path.temp3 > ~/.dotfiles/system/_path.temp4
    mv ~/.dotfiles/system/_path.temp4 ~/.dotfiles/system/_path.sh
    rm ~/.dotfiles/system/_path.temp
    rm ~/.dotfiles/system/_path.temp2
    rm ~/.dotfiles/system/_path.temp3
    success "office suite"
}

setup_pdf () {
    info "pdf viewer"
    user ' - What your favorite PDF viewer? Please, write path.'
    read -e pdf_viewer
    echo "export PDFVIEWER=\"$pdf_viewer\"" >> ~/.local.rc
    echo "PATH=$pdf_viewer:$PATH" > ~/.dotfiles/system/_path.temp
    sed s'=:=\n='g ~/.dotfiles/system/_path.temp  > ~/.dotfiles/system/_path.temp2
    uniq ~/.dotfiles/system/_path.temp2 > ~/.dotfiles/system/_path.temp3
    sed s'=\n=:='g ~/.dotfiles/system/_path.temp3 > ~/.dotfiles/system/_path.temp4
    mv ~/.dotfiles/system/_path.temp4 ~/.dotfiles/system/_path.sh
    rm ~/.dotfiles/system/_path.temp
    rm ~/.dotfiles/system/_path.temp2
    rm ~/.dotfiles/system/_path.temp3
    success "pdf viewer"
}

setup_visor () {
    user ' - What your favorite image viewer? Please, write path.'
    read -e visor
    echo "export VISOR=\"$visor\"" >> ~/.local.rc
    echo "PATH=$pdf_viewer:$PATH" > ~/.dotfiles/system/_path.temp
    sed s'=:=\n='g ~/.dotfiles/system/_path.temp  > ~/.dotfiles/system/_path.temp2
    uniq ~/.dotfiles/system/_path.temp2 > ~/.dotfiles/system/_path.temp3
    sed s'=\n=:='g ~/.dotfiles/system/_path.temp3 > ~/.dotfiles/system/_path.temp4
    mv ~/.dotfiles/system/_path.temp4 ~/.dotfiles/system/_path.sh
    rm ~/.dotfiles/system/_path.temp
    rm ~/.dotfiles/system/_path.temp2
    rm ~/.dotfiles/system/_path.temp3
}

setup_editor () {
    user ' - What is your text editor for shell (vim, emacs, nano...)?'
    read -e git_editor

    sed -e "s/CHOOSEN_EDITOR/$git_editor/g" ~/.dotfiles/git/gitconfig.symlink > ~/.dotfiles/git/gitconfig.symlink.current
    mv ~/.dotfiles/git/gitconfig.symlink.current ~/.dotfiles/git/gitconfig.symlink
    echo "export GIT_EDITOR=$git_editor" >> ~/.local.rc
    echo "export EDITOR=$git_editor" >> ~/.local.rc
    echo "PATH=$git_editor:$PATH" > ~/.dotfiles/system/_path.temp
    sed s'=:=\n='g ~/.dotfiles/system/_path.temp  > ~/.dotfiles/system/_path.temp2
    uniq ~/.dotfiles/system/_path.temp2 > ~/.dotfiles/system/_path.temp3
    sed s'=\n=:='g ~/.dotfiles/system/_path.temp3 > ~/.dotfiles/system/_path.temp4
    mv ~/.dotfiles/system/_path.temp4 ~/.dotfiles/system/_path.sh
    rm ~/.dotfiles/system/_path.temp
    rm ~/.dotfiles/system/_path.temp2
    rm ~/.dotfiles/system/_path.temp3
}

setup_gitlasts () {

    info "gitlasts"

    user ' - What your commit template should have?'
    read -e git_template

    if [ $git_template = " "]; then
        echo $git_template > ~/.dotfiles/git/gittemplate.symlink
        git config --global commit.template ~/.gittemplate
    fi

    user ' - What your last 8 digits of your gpg key?'
    read -e git_signing_key

    if [ $git_signing_key = " "]; then
        git config --global user.signingkey $git_signing_key
    fi


    echo "MY_GPG_KEY=$git_signing_key" >> ~/.local.rc

    success "gitlasts"
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_gitconfig
install_dotfiles
setup_gitlasts
setup_android_env
setup_browser
setup_editor
setup_visor
setup_pdf
setup_office

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if source bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
